
//get all
$albums = $this->getEntity('Album')->findAll();

//find id
$id = $this->getEntity('Kind')->find($AlbumSession->getKindId());

//find one with condition
//get album where albumId = ? and deleteFlag = ?
$album = $this->getEntity('Album')->findOneBy([
	'albumId' => $albumId, 
	'deleteFlag' => Album::getConfigValue('deleteFlag', 'DELETE_FLAG_OFF')
]);

//find all with condition
$artists = $this->getEntity('Artist')->findBy([
            'deleteFlag' => 0
        ]); 
//check result
if(!$album){
	return $this->execAction('error');
}

//sql
$DbConnection = $this->getServiceLocator()->get('EntityManager')->getConnection();
$sql = 'SELECT `m_product_detail_id`, `m_product_header_id`, `first_arrival_date`, `first_arrival_time` FROM `m_product_detail` WHERE `delete_flag` = :delete_flag ORDER BY `m_product_header_id`;';
$statement_pd = $DbConnection->prepare($sql);
$statement_pd->bindValue(':delete_flag', ProductHeader::getConfigValue('deleteFlag', 'DELETE_FLAG_OFF'));




//Query builder

$EntityManager = $this->getEntityManager();
$QueryBuilder = $EntityManager->createQueryBuilder();

$QueryBuilder->select('mc.customerId, mc.customerPassword, mc.uniqueId, mc.cardId, '
            . ' mc.nameSei, mc.nameMei, mc.kanaSei, mc.kanaMei, mc.email, '
            . ' mc.phone, mc.fax, mc.sexCd, mc.birthDate, mc.mailType, mc.dmFlag, mc.dmDeliverType, mc.telReceiveStatus, mc.telDeliverType, mc.mailmagReceiveStatus, '
            . ' mc.mailDeliverType, mc.htmlMailReceiveStatus, mc.smsReceiveStatus, mc.smsDeliverType, mc.messageType, mc.totalPoint, mc.deleteFlag, '
            . ' cc.customerCategoryName, cc.bandColor as customerCategoryBandColor, cc.bandColorName as customerCategoryBandColorName, '
            . ' mc.customerStatus, '
            . ' c.companyId, c.companyName, '
            . ' mc.departmentName, mc.postName, er.invitationFlag, mc.note, '
            . ' b.brandId, b.brandCode, b.brandName');
$QueryBuilder->from(CustomerEntity::class, 'mc');
//join
$QueryBuilder->leftJoin(CustomerCategoryEntity::class, 'cc', 'WITH', 'mc.customerCategoryId = cc.customerCategoryId');
$QueryBuilder->leftJoin(CompanyEntity::class, 'c', 'WITH', 'mc.companyId = c.companyId');
//where
$QueryBuilder->AndWhere($this->abbr . '.customerStatus IN ( ' . implode(',', $customerStatusList) . ' )');
//group by
$QueryBuilder->groupBy('mc.customerId');





















//transaction
$this->ServiceManager = Api::get()->getServiceManager();
$this->EntityManager = $this->ServiceManager->get('EntityManager');
try {
    $this->EntityManager->getConnection()->beginTransaction();
	//do some thing
	$this->EntityManager->flush();
    $this->EntityManager->clear();
    $this->EntityManager->getConnection()->commit();
} catch (Exception $exe) {
    $this->EntityManager->getConnection()->rollback();
    $this->ServiceManager->get('ErrorLogger')->err($exe->getMessage());
    return false;
}